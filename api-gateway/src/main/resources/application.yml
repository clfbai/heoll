spring:
  datasource:
    dynamic:
      enable: true
    druid: 
      # JDBC 配置(驱动类自动从url的mysql识别,数据源类型自动识别)
      core:
        url: jdbc:mysql://localhost:3306/oauth-center?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
        username: root
        password: 123456
        driver-class-name:  com.mysql.jdbc.Driver
      log:
        url: jdbc:mysql://localhost:3306/log-center?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
        username: root
        password: 123456
        driver-class-name:  com.mysql.jdbc.Driver   
      #连接池配置(通常来说，只需要修改initialSize、minIdle、maxActive
      initial-size: 30
      max-active: 100
      min-idle: 30
      # 配置获取连接等待超时的时间
      max-wait: 60000
      #打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      validation-query: SELECT 'x'
      test-on-borrow: false
      test-on-return: false 
      test-while-idle: true      
      #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      #配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      filters: stat,wall
      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
      #是否启用StatFilter默认值true
      web-stat-filter.enabled: true
      web-stat-filter.url-pattern:  /*
      web-stat-filter.exclusions: "*.js , *.gif ,*.jpg ,*.png ,*.css ,*.ico , /druid/*"
      web-stat-filter.session-stat-max-count: 1000
      web-stat-filter.profile-enable: true
      # StatViewServlet配置
      #展示Druid的统计信息,StatViewServlet的用途包括：1.提供监控信息展示的html页面2.提供监控信息的JSON API
      #是否启用StatViewServlet默认值true
      stat-view-servlet.enabled: true
      #根据配置中的url-pattern来访问内置监控页面，如果是上面的配置，内置监控页面的首页是/druid/index.html例如：
      stat-view-servlet.url-pattern:  /druid/*
      #允许清空统计数据
      stat-view-servlet.reset-enable:  true
      stat-view-servlet.login-username: admin
      stat-view-servlet.login-password: admin
################### mysq end ##########################
  redis:
    host: 127.0.0.1
    port: 6379
    timeout: 6000
    database: 1
    lettuce:
      pool:
        max-active: -1 # 连接池最大连接数（使用负值表示没有限制）,如果赋值为-1，则表示不限制；如果pool已经分配了maxActive个jedis实例，则此时pool的状态为exhausted(耗尽)
        max-idle: 8   # 连接池中的最大空闲连接 ，默认值也是8
        max-wait: -1 # # 等待可用连接的最大时间，单位毫秒，默认值为-1，表示永不超时。如果超过等待时间，则直接抛出JedisConnectionException  
        min-idle: 2    # 连接池中的最小空闲连接 ，默认值也是0
      shutdown-timeout: 100ms
################### redis 单机版 end ##########################
#mybatis:
mybatis-plus:        
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl 
  config-location: classpath:mybatis.cfg.xml
  mapper-locations: classpath*:com/boyu/erp/platform/gateway/dao/*.xml

security:
  oauth2:
    ignored:  /test163/** , /api-auth/** , /doc.html ,/test111 ,/api-user/users-anon/login,/user-center/users-anon/login,/document.html,**/v2/api-docs,/oauth/** ,/login.html ,/user/login,/**/**.css ,/**/**.js  
    token:
      store:
        type: redis


 

 

#设置最大超时时间
ribbon:  
  eager-load:
    enabled: true
  ServerListRefreshInterval: 10  #刷新服务列表源的间隔时间
  httpclient:
    enabled: false
  okhttp:
    enabled: true  
  ReadTimeout: 90000  
  ConnectTimeout: 90000 
  OkToRetryOnAllOperations: true
  MaxAutoRetries: 1
  MaxAutoRetriesNextServer: 1

 


#设置最大容错超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 90000



#设置最大容错超时时间
hystrix:
  threadpool:
    default:
      coreSize: 100
      maximumSize: 5000
      allowMaximumSizeToDivergeFromCoreSize: true
      maxQueueSize: -1
  command:
    default:
      circuitBreaker:
        foreOpen: false
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 900000          
        

 
zuul:
  ribbon-isolation-strategy: thread       # 提高吞吐量
  host:
    max-per-route-connections: 60000      # 适用于ApacheHttpClient，如果是okhttp无效。每个服务的http客户端连接池最大连接，默认是200
    max-total-connections: 60000          # 适用于ApacheHttpClient，如果是okhttp无效。每个route可用的最大连接数，默认值是20
  ribbon:
    eager-load:
      enabled: true
  threadPool:
    useSeparateThreadPools: true
    threadPoolKeyPrefix: api-gateway
  include:
    debug:
      header: true
  debug:
    request: true
    parameter: debugRequest
  retryable: false    #关闭重试
  sensitive-headers: #/oauth/token需要请求头处理
  ignored-headers: Access-Control-Allow-Credentials,Access-Control-Allow-Origin,Access-Control-Allow-Methods
  add-host-header: true
#  add-proxy-headers: true  #授权码跳转问题
  routes:
#    演示配置
#    baidu:  
#      path: /test163/**
#      url: http://59.110.164.254:9999
    auth:
      path: /api-auth/**
      service-id: auth-server 
      strip-prefix: true   
      custom-sensitive-headers: true  #http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/ zuul授权码跳转问题
    auth-login-page:
      path: /login.html
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true
    auth-css-process01:
      path: /css/import_main.css
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true
    auth-css-process02:
      path: /css/page_all.css
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true    
    auth-js-process01:
      path: /js/ld.min.js
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true  
    auth-js-process02:
      path: /js/wrapper.js
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true 
    auth-login-process:
      path: /user/login
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true
    auth-login-token:
      path: /oauth/token
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true  
    auth-login-authorize:
      path: /oauth/authorize
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true
    auth-check-process:
      path: /oauth/check_token
      service-id: auth-server
      strip-prefix: true
      custom-sensitive-headers: true  
    user:
      path: /api-user/**
      service-id: user-center
      strip-prefix: true
      custom-sensitive-headers: true  #http://blog.didispace.com/spring-cloud-zuul-cookie-redirect/ zuul授权码跳转问题
    file:
      path: /api-file/**
      service-id: file-center  
      strip-prefix: true
    sms:
      path: /api-sms/**
      service-id: sms-center  
      strip-prefix: true
    eureka:
      path: /api-eureka/**
      service-id: eureka-server
      strip-prefix: true
    generator:
      path: /api-generator/**
      service-id: generator-center
      strip-prefix: true
    log:
      path: /api-log/**
      service-id: log-center
      strip-prefix: true     
  ssl-hostname-validation-enabled: false
  ratelimit:
    enabled: false  #默认不限流
    repository: REDIS
    policy-list:
      user:
        - limit: 10
          refresh-interval: 60
          type:
            - origin
      auth:
        - limit: 10
          refresh-interval: 60
          type:
            - origin
      file:
        - limit: 10
          refresh-interval: 60
          type:
            - origin
      log:
        - limit: 10
          refresh-interval: 60
          type:
            - origin
            
  


#swagger:
#  butler:
#    api-docs-path:  /v2/api-docs
#  swagger-version: 2.0  
#  resources:
#    auth:
#      name: auth-server
#      api-docs-path: /auth/v2/api-docs
#      swagger-version: 2.0
#    client:
#      name: eureka-client     
#      api-docs-path: /client/v2/api-docs 
#      swagger-version: 2.0      
#    auth_client:
#      name: auth-client
#      api-docs-path: /auth-client/v2/api-docs
#      swagger-version: 2.0     
   
swagger:
  butler:
    api-docs-path:  v2/api-docs
    auto-generate-from-zuul-routes: true
    ignore-routes: auth-login-page,auth-login-process,auth-login-token,auth-login-authorize,auth-check-process,auth-css-process01,auth-css-process02,auth-js-process01,auth-js-process02
      
#  generate-routes: auth-server, auth-client 

logging:
  level:
    com.open.capacity: INFO 
    org.hibernate: INFO
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.hibernate.type.descriptor.sql.BasicExtractor: TRACE
   
